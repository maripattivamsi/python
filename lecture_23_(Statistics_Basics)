#Mean (Sum of oberation by no of obervation)
import pandas as pd
data = {
    'Age': [25, 30, 78, 58, 46, 48, 16, 45 ],
    'Salary':[50000,40000,80000,40000,90000,40000,62000,45000]
}
df = pd.DataFrame(data)
#mean
M = df['Age'].mean()
S = df['Salary'].mean()
print('Mean of age: ',M)
print('Mean of Salary: ',S )

#Median
Median_a = df['Age'].median()
Median_s = df['Salary'].median()
print("Median of age: ",Median_a)
print("Median of salary: ", Median_s)

#Mode
Mode_a = df['Age'].mode()[0]
Mode_s = df['Salary'].mode()[0]
print("Mode of Age: " , Mode_a)
print("Mode of Salary: ", Mode_s)

#Standard Deviation
std_a = df['Age'].std()
std_s = df['Salary'].std()
print("Standard Deviation of age: ", std_a)
print("Standard Deviation of salary: ", std_s)

#Variance
var_a = df['Age'].var()
var_s = df['Salary'].var()
print("Variance of age: ", var_a)
print("Variance od salary: ", var_s)

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats

# Normal Distributions
m = 0
sigma = 0.1
s = np.random.normal(m, sigma, 1000)

# Plotting the histogram
count, bins, ignored = plt.hist(s, 30, density=True)
plt.plot(bins, 1/(sigma*np.sqrt(2*np.pi))*np.exp(-(bins - m)**2/(2*sigma**2)), linewidth=2, color='g')
plt.title("Normal Distribution")
plt.xlabel("Value")
plt.ylabel("Probability Density")
plt.show()

#Binomal Distribution
n,p=10,0.5
b=np.random.binomial(n,p,1000)
plt.hist(b,bins=10,density=True,alpha=0.6,color='b')
plt.title("Binomal Distribution")
plt.show()

#Quartiles
import numpy as np
#sample data
d = [1,2,3,4,5,6,7,8,9,10]
q1=np.percentile(d,25)
q2=np.median(d)
q3=np.percentile(d,75)
iqr=q3-q1
print(f"Q1: {q1}")
print(f"Q2 Median: {q2}")
print(f"Q3: {q3}")
print(f"iqr: {iqr}")

#Z-Scores
import numpy as np
d = [1,2,3,4,5,6,7,8,9,10]
m=np.mean(d)
std_d=np.std(d)
Z_score = [(x-m)/std_d for x in d]
print(f"Mean: {m}")
print(f"Standard Deviations: {std_d}")
print(f"Z-Score: {Z_score}")
